/*REXX*/
/*This program is intended to solve the Advent of Code*/
/*2023 Challange: Day 1 Part 21*/

HLQ=userid()
inMember=HLQ||'.'||'DAY3.REXX(sample1)'
partNumber.lineNum.nIndex='Empty'
leftBound.lineNum.nIndex='Empty'
rightBound.lineNum.nIndex='Empty'
foundSymbol.lineNum.sIndex='0'


/* read in input*/
"Alloc FI(INDD) DA('"inMember"') SHR"
"EXECIO * DISKR INDD (STEM input. FINIS"
/*test values*/
TargetString=input.1
searchIndex=0
do lineNum=1 to input.0 by 1
    symbolIndex=1
    TargetString=input.lineNum
    do until length(TargetString)<1
     /*TargetString=input.lineNum*/
    /*probably better to call this with the naked value rather than try*/
    /*and have it return stuff. don't remember how to do that.*/
    /*pass the string to be searched, and the needed indexe to set the stems*/
        outString=findNumber(TargetString)
        /*if a symbol indicator is returned put the second 1 in the */
        /*foundSymbol.lineNum.sIndex, set the 3rd word to TargetString*/ 
        if find(outoutString,'symbol')>0 then 
        do
            parse var outString trash foundSymbol.lineNum.symbolIndex,
            TargetString
        end
        else 
        do
            TargetString=outString
        end
    end
    
end    



exit
/* method to find and return the line positions of special characters, as well*/
/* as the value of found numbers, and their start and end position.*/
/* pass in a string, the lineNum, the nIndex and the sIndex*/
/*this metod is ment to be called recursivly*/
/* for testing, lets just have it pint out the values for now before we return*/
findNumber: procedure
searchString=arg(1)
/*say TargetString*/
firstNumFound=0
partNumber=''
do searchIndex=1 to length(searchString) by 1
    /*check to see if its a reguilar character, a period or string.*/ 
    /*branch acordingly*/
    /*get the first character*/
    currentChar=substr(searchString,searchIndex,1)
    /*verify if its a number*/
    if datatype(currentChar,'N') then
    do
        if firstNumFound=0 then pos1=searchIndex
        partNumber=partNumber||currentChar
        firstNumFound=1
    end
    /*if it's a symbol*/
    else 
    do
        /*if its a non period symbol*/
        if currentChar\='.' then
        do
            /*if foundSymbol.sIndex-1.position=0, set */
            /*foundSymbol.sIndex.position=searchIndex. if not set it to */
            /*foundSymbol.sIndex-1.position+searchIndex*/
            
            say "symbol" currentChar "position" searchIndex
            exitString=substr(searchString,searchIndex)
            /*STUCK IN AN ENDLESS LOOP HERE */
            return 'symbol '||searchIndex||' '||exitString
        end
        else
        do
            say "period" currentChar
        end
        /*if found a number previously, retrun the remainder of */
        /*the string*/
        if firstNumFound==1 then 
        do 
            say "position1" pos1 "position2" searchIndex-1 'number:' partNumber
            exitString=substr(searchString,searchIndex)
            /*arg( TargetString)*/
            
            return exitString
        end  
    end
    
end
return ''

/* the problem i'm having right now is variables arguments to procedures.*/
/*and methods. i think it would work if i could figure that out */
/* what i'm getting is i can't pass this as a stem.*/
/*i could possibly pass a stack*/
/*ok, so i just have to be sure to convert it to a proper string before*/
/*passing it. I think i can make that work.*/
